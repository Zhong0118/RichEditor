<script setup lang="ts">
import { onBeforeUnmount, onMounted, ref, watch } from 'vue'
import { storeToRefs } from 'pinia'
import { useEditor, EditorContent, BubbleMenu } from '@tiptap/vue-3'
import Underline from '@tiptap/extension-underline'
// 表格
import Table from '@tiptap/extension-table'
import TableCell from '@tiptap/extension-table-cell'
import TableHeader from '@tiptap/extension-table-header'
import TableRow from '@tiptap/extension-table-row'
// 列表
import ListItem from '@tiptap/extension-list-item'
import OrderedList from '@tiptap/extension-ordered-list'
import BulletList from '@tiptap/extension-bullet-list'
// 媒体
// 媒体
import Image from '@tiptap/extension-image'
// code
import CodeBlockLowlight from '@tiptap/extension-code-block-lowlight'
import css from 'highlight.js/lib/languages/css'
import js from 'highlight.js/lib/languages/javascript'
import ts from 'highlight.js/lib/languages/typescript'
import html from 'highlight.js/lib/languages/xml'
import { common, createLowlight } from 'lowlight'
const lowlight = createLowlight()
lowlight.register({ html, ts, css, js })
// 字数统计
import CharacterCount from '@tiptap/extension-character-count'
import Heading from '@tiptap/extension-heading'
import StarterKit from '@tiptap/starter-kit'
import Placeholder from '@tiptap/extension-placeholder'
import { UndoRound, MoreHorizOutlined } from '@vicons/material'
import TaskItem from '@tiptap/extension-task-item'
import TaskList from '@tiptap/extension-task-list'
import Suggestion from '@tiptap/suggestion'
import { useEditorStore, useUserStore } from '@/stores'
import { useMessage } from 'naive-ui'
import EditorMenu from './EditorMenu.vue'
import { request } from '@/utils/request'

// 文档内容初始化
const props = defineProps<{
  content?: string
}>()
// 文档全局状态
const editorStore = useEditorStore()
const userStore = useUserStore()
const CustomTableCell = TableCell.extend({
  addAttributes() {
    return {
      // extend the existing attributes …
      ...this.parent?.(),

      // and add a new one …
      backgroundColor: {
        default: null,
        parseHTML: (element) => element.getAttribute('data-background-color'),
        renderHTML: (attributes) => {
          return {
            'data-background-color': attributes.backgroundColor,
            style: `background-color: ${attributes.backgroundColor}`
          }
        }
      }
    }
  }
})
// 加载headings
const loadHeadings = () => {
  const headings = [] as any[]
  if (!editor.value) return
  const transaction = editor.value.state.tr
  if (!transaction) return

  editor.value?.state.doc.descendants((node, pos) => {
    if (node.type.name === 'heading') {
      console.log(pos, node)
      const start = pos
      const end = pos + node.content.size
      // const end = pos + node
      const id = `heading-${headings.length + 1}`
      if (node.attrs.id !== id) {
        transaction?.setNodeMarkup(pos, undefined, {
          ...node.attrs,
          id
        })
      }

      headings.push({
        level: node.attrs.level,
        text: node.textContent,
        start,
        end,
        id
      })
    }
  })

  transaction?.setMeta('addToHistory', false)
  transaction?.setMeta('preventUpdate', true)

  editor.value?.view.dispatch(transaction)
  editorStore.setHeadings(headings)
}
// 编辑器初始化
const editor = useEditor({
  content: ``,
  extensions: [
    StarterKit,
    TaskList,
    TaskItem,
    Placeholder.configure({
      placeholder: '开始输入文本 …'
    }),
    Table.configure({
      resizable: true
    }),
    TableRow,
    TableHeader,
    CustomTableCell,
    OrderedList,
    BulletList,
    ListItem,
    Image,
    CharacterCount.configure({
      limit: 10000
    })
  ],
  onUpdate({ edit }) {
    loadHeadings()
    editorStore.setEditorInstance(editor.value)
  },
  onCreate({ edit }) {
    loadHeadings()
    editorStore.setEditorInstance(editor.value)
  },
  injectCSS: false
})
const emits = defineEmits(['trans', 'pretty', 'headingsUpdate'])
defineExpose({
  insert: (text) => {
    editor.value
      ?.chain()
      .focus()
      .command(({ tr }) => {
        // 在事务中执行以下代码
        tr.insertText(text)
        return true
      })
      .run()
  }
})
const message = useMessage()

const btnDisabled = ref(false)
const callAi = async (e) => {
  const { state } = editor.value!
  const { from, to } = state.selection
  const text = state.doc.textBetween(from, to, ' ')
  btnDisabled.value = true
  const { data: responseData } = await request.post('/llm/chat', {
    type: e,
    content: text,
    userid: userStore.userInfo.id
  })
  btnDisabled.value = false
  if (responseData.code === 200) {
    console.log(responseData)

    editor.value?.commands.insertContent(responseData.data)
  }
}
</script>
<template>
  <n-layout
    class="w-[800px] m-auto shadow-2xl border-e-2"
    content-style="display: flex; flex-direction:column;overflow: hidden"
    style="height: 100%"
  >
    <n-layout-header
      style="height: 32px; padding: 0 20px"
      bordered
    >
      <EditorMenu :editor="editor" />
    </n-layout-header>
    <n-layout-content content-style="flex:1;">
      <template v-if="editor">
        <EditorContent
          style="padding: 8px; height: 100%; overflow-y: auto"
          :editor="editor"
        />
        <BubbleMenu
          ref="bubbleMenu"
          :tippy-options="{ placement: 'bottom-end' }"
          :editor="editor"
        >
          <NButtonGroup>
            <NButton
              size="small"
              type="primary"
              @click="callAi(0)"
              :disabled="btnDisabled"
              >润色</NButton
            >
            <NButton
              size="small"
              type="primary"
              :disabled="btnDisabled"
              @click="callAi(1)"
              >续写</NButton
            >
            <NButton
              size="small"
              type="primary"
              :disabled="btnDisabled"
              @click="callAi(2)"
              >翻译</NButton
            >
          </NButtonGroup>
        </BubbleMenu>
      </template>
    </n-layout-content>
    <n-layout-footer
      style="height: 32px; padding: 0 20px"
      bordered
    >
      <n-space class="absolute bottom-0 left-0 right-0 bg-gray-100 px-6">
        <div>
          字数统计:
          {{ editor?.storage.characterCount.characters() }}
        </div>
      </n-space>
    </n-layout-footer>
  </n-layout>
</template>