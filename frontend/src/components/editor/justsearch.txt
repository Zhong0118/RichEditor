<script setup lang="ts">
import { onBeforeUnmount, watch } from 'vue'
import { storeToRefs } from 'pinia'
import { useEditor, EditorContent, BubbleMenu } from '@tiptap/vue-3'
import Underline from '@tiptap/extension-underline'
// 表格
import Table from '@tiptap/extension-table'
import TableCell from '@tiptap/extension-table-cell'
import TableHeader from '@tiptap/extension-table-header'
import TableRow from '@tiptap/extension-table-row'
// 列表
import ListItem from '@tiptap/extension-list-item'
import OrderedList from '@tiptap/extension-ordered-list'
import BulletList from '@tiptap/extension-bullet-list'
// 媒体
import Image from '@tiptap/extension-image'
// code
import CodeBlockLowlight from '@tiptap/extension-code-block-lowlight'
import css from 'highlight.js/lib/languages/css'
import js from 'highlight.js/lib/languages/javascript'
import ts from 'highlight.js/lib/languages/typescript'
import html from 'highlight.js/lib/languages/xml'
import { common, createLowlight } from 'lowlight'
const lowlight = createLowlight()
lowlight.register({ html, ts, css, js })
// 字数统计
import CharacterCount from '@tiptap/extension-character-count'
import Heading from '@tiptap/extension-heading'
import StarterKit from '@tiptap/starter-kit'
import Placeholder from '@tiptap/extension-placeholder'
import { UndoRound, MoreHorizOutlined } from '@vicons/material'
import TaskItem from '@tiptap/extension-task-item'
import TaskList from '@tiptap/extension-task-list'

import { useEditorStore } from '@/stores'
import { useMessage } from 'naive-ui'
import EditorMenu from './EditorMenu.vue'

// 文档内容初始化
const props = defineProps<{
  content?: string
  loading?: boolean
}>()
// 文档全局状态
const editorStore = useEditorStore()
const CustomTableCell = TableCell.extend({
  addAttributes() {
    return {
      // extend the existing attributes …
      ...this.parent?.(),

      // and add a new one …
      backgroundColor: {
        default: null,
        parseHTML: (element) => element.getAttribute('data-background-color'),
        renderHTML: (attributes) => {
          return {
            'data-background-color': attributes.backgroundColor,
            style: `background-color: ${attributes.backgroundColor}`
          }
        }
      }
    }
  }
})
// 加载headings
const loadHeadings = () => {
  const headings = [] as any[]
  if (!editor.value) return
  const transaction = editor.value.state.tr
  if (!transaction) return

  editor.value?.state.doc.descendants((node, pos) => {
    if (node.type.name === 'heading') {
      console.log(pos, node)
      const start = pos
      const end = pos + node.content.size
      // const end = pos + node
      const id = `heading-${headings.length + 1}`
      if (node.attrs.id !== id) {
        transaction?.setNodeMarkup(pos, undefined, {
          ...node.attrs,
          id
        })
      }

      headings.push({
        level: node.attrs.level,
        text: node.textContent,
        start,
        end,
        id
      })
    }
  })

  transaction?.setMeta('addToHistory', false)
  transaction?.setMeta('preventUpdate', true)

  editor.value?.view.dispatch(transaction)
  editorStore.setHeadings(headings)
}
// 编辑器初始化
const editor = useEditor({
  content: ``,
  extensions: [
    StarterKit,
    TaskList,
    TaskItem,
    Placeholder.configure({
      placeholder: '开始输入文本 …'
    }),
    Table.configure({
      resizable: true
    }),
    TableRow,
    TableHeader,
    CustomTableCell,
    OrderedList,
    BulletList,
    ListItem,
    Image,
    CharacterCount.configure({
      limit: 10000
    })
  ],
  onUpdate({ edit }) {
    loadHeadings()
    editorStore.setEditorInstance(editor.value)
  },
  onCreate({ edit }) {
    loadHeadings()
    editorStore.setEditorInstance(editor.value)
  },
  injectCSS: false
})
const emits = defineEmits(['trans', 'pretty', 'headingsUpdate'])
defineExpose({
  insert: (text) => {
    editor.value
      ?.chain()
      .focus()
      .command(({ tr }) => {
        // 在事务中执行以下代码
        tr.insertText(text)
        return true
      })
      .run()
    // editor.value?.chain().se
  }
})
const message = useMessage()
onBeforeUnmount(() => {
  editor.value!.destroy()
})

const toolStatus = ref(0)
const { activeTab } = storeToRefs(editorStore)
const { setActiveTab } = editorStore
const handlePretty = (e) => {
  const { state } = editor.value!
  const { from, to } = state.selection
  const text = state.doc.textBetween(from, to, ' ')
  setActiveTab('协同编辑')
  emits('pretty', e, text)
}
</script>
<template>
  <n-layout
    class="w-[800px] m-auto shadow-2xl border-e-2"
    content-style="display: flex; flex-direction:column;overflow: hidden"
    style="height: 100%"
  >
    <n-layout-header
      style="height: 32px; padding: 0 20px"
      bordered
    >
      <EditorMenu :editor="editor" />
    </n-layout-header>
    <n-layout-content content-style="flex:1;">
      <template v-if="editor">
        <EditorContent
          style="padding: 8px; height: 100%; overflow-y: auto"
          :editor="editor"
        />
        <BubbleMenu
          ref="bubbleMenu"
          :tippy-options="{ placement: 'bottom-end' }"
          :editor="editor"
        >
          <!-- <NButton></NButton> -->
          <template v-if="toolStatus === 0">
            <NButtonGroup>
              <NPopover
                style="padding: 0"
                :show-arrow="false"
                placement="bottom"
              >
                <template #trigger>
                  <NButton
                    size="small"
                    type="primary"
                  >
                    <NIcon :component="MoreHorizOutlined" />
                  </NButton>
                </template>
                <template #default>
                  <NButtonGroup vertical>
                    <NButton @click="insertMindMap">思维导图</NButton>
                    <NButton @click="insertTable">表格总结</NButton>
                    <NButton @click="insertMindMap">洞察推荐</NButton>
                  </NButtonGroup>
                </template>
              </NPopover>
              <NButton
                size="small"
                :disabled="loading"
                @click="handlePretty($event)"
                type="primary"
                >润色</NButton
              >
              <NButton
                size="small"
                type="primary"
                >续写</NButton
              >
            </NButtonGroup>
          </template>
        </BubbleMenu>
      </template>
    </n-layout-content>
    <n-layout-footer
      style="height: 32px; padding: 0 20px"
      bordered
    >
      <n-space class="absolute bottom-0 left-0 right-0 bg-gray-100 px-6">
        <div>
          字数统计:
          {{ editor?.storage.characterCount.characters() }}
        </div>
      </n-space>
    </n-layout-footer>
  </n-layout>
</template>

<style lang="scss">
b {
  font-weight: bold;
}
.ProseMirror {
  overflow-y: scroll;
}
.ProseMirror p {
  margin: 0;
}
.ProseMirror:focus {
  outline: none;
}
.tiptap p.is-editor-empty:first-child::before {
  color: #adb5bd;
  content: attr(data-placeholder);
  float: left;
  height: 0;
  pointer-events: none;
}

.tiptap {
  > * + * {
    margin-top: 0.75em;
  }

  ul {
    padding: 0 2rem;
    list-style: square;
  }
  ol {
    padding: 0 2rem;
    list-style: decimal;
  }
  table {
    border-collapse: collapse;
    table-layout: fixed;
    width: 100%;
    margin: 0;
    overflow: hidden;

    td,
    th {
      min-width: 1em;
      border: 2px solid #ced4da;
      padding: 3px 5px;
      vertical-align: top;
      box-sizing: border-box;
      position: relative;

      > * {
        margin-bottom: 0;
      }
    }

    th {
      font-weight: bold;
      text-align: left;
      background-color: #f1f3f5;
    }

    .selectedCell:after {
      z-index: 2;
      position: absolute;
      content: '';
      left: 0;
      right: 0;
      top: 0;
      bottom: 0;
      background: rgba(200, 200, 255, 0.4);
      pointer-events: none;
    }

    .column-resize-handle {
      position: absolute;
      right: -2px;
      top: 0;
      bottom: -2px;
      width: 4px;
      background-color: #adf;
      pointer-events: none;
    }

    p {
      margin: 0;
    }
  }
  pre {
    background: #0d0d0d;
    color: #fff;
    font-family: 'JetBrainsMono', monospace;
    padding: 0.75rem 1rem;
    border-radius: 0.5rem;

    code {
      color: inherit;
      padding: 0;
      background: none;
      font-size: 0.8rem;
    }

    .hljs-comment,
    .hljs-quote {
      color: #616161;
    }

    .hljs-variable,
    .hljs-template-variable,
    .hljs-attribute,
    .hljs-tag,
    .hljs-name,
    .hljs-regexp,
    .hljs-link,
    .hljs-name,
    .hljs-selector-id,
    .hljs-selector-class {
      color: #f98181;
    }

    .hljs-number,
    .hljs-meta,
    .hljs-built_in,
    .hljs-builtin-name,
    .hljs-literal,
    .hljs-type,
    .hljs-params {
      color: #fbbc88;
    }

    .hljs-string,
    .hljs-symbol,
    .hljs-bullet {
      color: #b9f18d;
    }

    .hljs-title,
    .hljs-section {
      color: #faf594;
    }

    .hljs-keyword,
    .hljs-selector-tag {
      color: #70cff8;
    }

    .hljs-emphasis {
      font-style: italic;
    }

    .hljs-strong {
      font-weight: 700;
    }
  }
}

.tableWrapper {
  overflow-x: auto;
}

.resize-cursor {
  cursor: ew-resize;
  cursor: col-resize;
}
</style>
